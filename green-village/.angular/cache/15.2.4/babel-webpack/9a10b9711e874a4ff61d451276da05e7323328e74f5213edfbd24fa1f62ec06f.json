{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { map } from 'rxjs';\nlet NewProduitComponent = class NewProduitComponent {\n  constructor(formbuilder, categoriesService, http, uploadService) {\n    this.formbuilder = formbuilder;\n    this.categoriesService = categoriesService;\n    this.http = http;\n    this.uploadService = uploadService;\n  }\n  ngOnInit() {\n    this.images = [];\n    this.categories$ = this.categoriesService.getAllSousCategories();\n    this.produitForm = this.formbuilder.group({\n      refProduit: [null, Validators.required],\n      shortLibel: [null, Validators.required],\n      longLibel: [null, Validators.required],\n      idCategorie: [null, Validators.required],\n      prixHt: [null, Validators.required]\n    });\n    this.produitpreview$ = this.produitForm.valueChanges.pipe(map(formValue => ({\n      ...formValue,\n      id: 0\n    })));\n    this.photoForm = this.formbuilder.group({\n      photo: [null, Validators.required]\n    });\n  }\n  onFilechange(event) {\n    this.file = event.target.files[0];\n  }\n  upload() {\n    if (this.file) {\n      this.uploadService.uploadFile(this.file).subscribe(response => {\n        alert(\"Image chargé sur le serveur\");\n        this.images.push(response.nom);\n        console.log(this.images);\n      });\n    } else {\n      alert(\"please select a file first\");\n    }\n  }\n  onSubmitForm(event) {\n    this.file = event.target.file;\n    console.log(this.file);\n  }\n};\nNewProduitComponent = __decorate([Component({\n  selector: 'app-new-produit',\n  templateUrl: './new-produit.component.html',\n  styleUrls: ['./new-produit.component.scss']\n})], NewProduitComponent);\nexport { NewProduitComponent };","map":{"version":3,"mappings":";AACA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AACnE,SAASC,GAAG,QAAoB,MAAM;AAY/B,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAS9BC,YAAoBC,WAAwB,EACxBC,iBAAoC,EACpCC,IAAgB,EAChBC,aAA4B;IAH5B,gBAAW,GAAXH,WAAW;IACX,sBAAiB,GAAjBC,iBAAiB;IACjB,SAAI,GAAJC,IAAI;IACJ,kBAAa,GAAbC,aAAa;EAAoB;EAErDC,QAAQ;IACN,IAAI,CAACC,MAAM,GAAG,EAAE;IAEhB,IAAI,CAACC,WAAW,GAAG,IAAI,CAACL,iBAAiB,CAACM,oBAAoB,EAAE;IAEhE,IAAI,CAACC,WAAW,GAAG,IAAI,CAACR,WAAW,CAACS,KAAK,CAAC;MACxCC,UAAU,EAAE,CAAC,IAAI,EAAEd,UAAU,CAACe,QAAQ,CAAC;MACvCC,UAAU,EAAE,CAAC,IAAI,EAAEhB,UAAU,CAACe,QAAQ,CAAC;MACvCE,SAAS,EAAE,CAAC,IAAI,EAAEjB,UAAU,CAACe,QAAQ,CAAC;MACtCG,WAAW,EAAE,CAAC,IAAI,EAAElB,UAAU,CAACe,QAAQ,CAAC;MACxCI,MAAM,EAAE,CAAC,IAAI,EAAEnB,UAAU,CAACe,QAAQ;KACnC,CAAC;IACF,IAAI,CAACK,eAAe,GAAG,IAAI,CAACR,WAAW,CAACS,YAAY,CAACC,IAAI,CACvDrB,GAAG,CAACsB,SAAS,KAAK;MAChB,GAAGA,SAAS;MACZC,EAAE,EAAE;KACL,CAAC,CAAC,CACJ;IACD,IAAI,CAACC,SAAS,GAAG,IAAI,CAACrB,WAAW,CAACS,KAAK,CAAC;MACtCa,KAAK,EAAE,CAAC,IAAI,EAAE1B,UAAU,CAACe,QAAQ;KAClC,CAAC;EACJ;EAGAY,YAAY,CAACC,KAAU;IACrB,IAAI,CAACC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EACnC;EACAC,MAAM;IACJ,IAAG,IAAI,CAACH,IAAI,EAAC;MACX,IAAI,CAACtB,aAAa,CAAC0B,UAAU,CAAC,IAAI,CAACJ,IAAI,CAAC,CAACK,SAAS,CAAEC,QAAuB,IAAI;QAC7EC,KAAK,CAAC,6BAA6B,CAAC;QACpC,IAAI,CAAC3B,MAAM,CAAC4B,IAAI,CAACF,QAAQ,CAACG,GAAG,CAAC;QAC9BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC/B,MAAM,CAAC;MAC1B,CAAC,CAAC;KACH,MAAM;MACL2B,KAAK,CAAC,4BAA4B,CAAC;;EAEvC;EAGAK,YAAY,CAACb,KAAU;IACrB,IAAI,CAACC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACD,IAAI;IAC7BU,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,IAAI,CAAC;EACxB;CAGD;AA5DY3B,mBAAmB,eAL/BH,SAAS,CAAC;EACT2C,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,GACW1C,mBAAmB,CA4D/B;SA5DYA,mBAAmB","names":["Component","Validators","map","NewProduitComponent","constructor","formbuilder","categoriesService","http","uploadService","ngOnInit","images","categories$","getAllSousCategories","produitForm","group","refProduit","required","shortLibel","longLibel","idCategorie","prixHt","produitpreview$","valueChanges","pipe","formValue","id","photoForm","photo","onFilechange","event","file","target","files","upload","uploadFile","subscribe","response","alert","push","nom","console","log","onSubmitForm","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/pierre/Documents/GitHub/CDA_fil_rouge/Angular/green-village/src/app/new-produit/new-produit.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { map, Observable } from 'rxjs';\nimport { ResponsePhoto } from '../interface/reponsePhoto.interface';\nimport { Categorie } from '../models/categorie.model';\nimport { Produit } from '../models/produit.model';\nimport { CategoriesService } from '../services/categories.service';\nimport { uploadService } from '../services/upload.servive';\n\n@Component({\n  selector: 'app-new-produit',\n  templateUrl: './new-produit.component.html',\n  styleUrls: ['./new-produit.component.scss']\n})\nexport class NewProduitComponent implements OnInit {\n\n  produitForm!: FormGroup;\n  photoForm!: FormGroup;\n  produitpreview$!: Observable<Produit>;\n  categories$!: Observable<Categorie[]>;\n  file!: File;\n  images!:string[]; \n\n  constructor(private formbuilder: FormBuilder,\n              private categoriesService: CategoriesService,\n              private http: HttpClient,\n              private uploadService: uploadService,) { }\n\n  ngOnInit(): void {\n    this.images = [];\n\n    this.categories$ = this.categoriesService.getAllSousCategories();\n\n    this.produitForm = this.formbuilder.group({\n      refProduit: [null, Validators.required],\n      shortLibel: [null, Validators.required],\n      longLibel: [null, Validators.required],\n      idCategorie: [null, Validators.required],\n      prixHt: [null, Validators.required],\n    });\n    this.produitpreview$ = this.produitForm.valueChanges.pipe(\n      map(formValue => ({\n        ...formValue,\n        id: 0,\n      }))\n    );\n    this.photoForm = this.formbuilder.group({\n      photo: [null, Validators.required]\n    });\n  }\n\n  \n  onFilechange(event: any){\n    this.file = event.target.files[0];\n  }\n  upload(){   \n    if(this.file){\n      this.uploadService.uploadFile(this.file).subscribe((response: ResponsePhoto) =>{\n        alert(\"Image chargé sur le serveur\");\n        this.images.push(response.nom);\n        console.log(this.images);\n      })\n    } else {\n      alert(\"please select a file first\")\n    }\n  }\n\n\n  onSubmitForm(event: any) {\n    this.file = event.target.file;\n    console.log(this.file);\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}