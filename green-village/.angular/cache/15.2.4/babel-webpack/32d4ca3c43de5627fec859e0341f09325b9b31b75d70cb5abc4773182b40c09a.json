{"ast":null,"code":"const LOWERCASE_TRANSFORMER = function (fragments, separator) {\n  return fragments.join(separator).toLowerCase();\n};\nconst SENTENCECASE_TRANSFORMER = function (fragments, separator) {\n  const sentence = fragments.join(separator);\n  return sentence.charAt(0).toUpperCase() + sentence.slice(1).toLowerCase();\n};\nconst TITLECASE_TRANSFORMER = function (fragments, separator) {\n  const buffer = [];\n  for (let index = 0; index < fragments.length; index++) {\n    buffer.push(fragments[index].charAt(0).toUpperCase() + fragments[index].slice(1).toLowerCase());\n  }\n  return buffer.join(separator);\n};\nconst UPPERCASE_TRANSFORMER = function (fragments, separator) {\n  return fragments.join(separator).toUpperCase();\n};\nconst INVALID_SEPARATOR = /[^-._~!$&'()*+,;=]/;\nconst CAMELCASE_REGEXP_PATTERN = '(?:[a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))';\nfunction validate(options, extra) {\n  const camelCase = options.camelCase;\n  if (camelCase !== undefined && typeof camelCase !== 'boolean') {\n    throw new Error('camelCase must be a boolean: \"' + camelCase + '\".');\n  }\n  const separator = options.separator;\n  extra = extra || {};\n  if (separator !== undefined && !('separator' in extra && separator === extra.separator)) {\n    if (typeof separator !== 'string') {\n      throw new Error('separator must be a string' + ('separator' in extra ? ' or ' + extra.separator : '') + ': \"' + separator + '\".');\n    } else if (INVALID_SEPARATOR.test(separator)) {\n      throw new Error('separator has an invalid character: \"' + separator.match(INVALID_SEPARATOR)[0] + '\".');\n    }\n  }\n  const transformer = options.transformer;\n  if (transformer !== undefined && transformer !== false && typeof transformer !== 'function') {\n    throw new Error('transformer must be false or a function: \"' + transformer + '\".');\n  }\n}\nfunction replace(string, definitions) {\n  for (let index = 0, length = string.length; index < length; index++) {\n    const char = string[index];\n    const replacement = definitions[char];\n    if (replacement !== undefined) {\n      string = string.substr(0, index) + replacement + string.substr(index + 1);\n      const addedCharsCount = String(replacement).length - 1;\n      index += addedCharsCount;\n      length += addedCharsCount;\n    }\n  }\n  return string;\n}\n\n// eslint-disable-next-line no-misleading-character-class\nconst COMBINING_CHARS = /[\\u0300-\\u036F\\u1AB0-\\u1AFF\\u1DC0-\\u1DFF]+/g;\nconst CONVERT = /[A-Za-z\\d]+/g;\nconst CONVERT_CAMELCASE = new RegExp('[A-Za-z\\\\d]*?' + CAMELCASE_REGEXP_PATTERN + '|[A-Za-z\\\\d]+', 'g');\nfunction convert(string, options) {\n  options = options || {};\n  if (process.env.NODE_ENV !== 'production') {\n    validate(options);\n  }\n  const camelCase = options.camelCase !== undefined ? options.camelCase : true;\n  const separator = options.separator !== undefined ? options.separator : '-';\n  const transformer = options.transformer !== undefined ? options.transformer : LOWERCASE_TRANSFORMER;\n  const fragments = (options.dictionary ? replace(String(string), options.dictionary) : String(string)).normalize('NFKD').replace(COMBINING_CHARS, '').match(camelCase ? CONVERT_CAMELCASE : CONVERT);\n  if (!fragments) {\n    return '';\n  }\n  return transformer ? transformer(fragments, separator) : fragments.join(separator);\n}\nconst REVERT = /[^-._~!$&'()*+,;=]+/g;\nconst REVERT_CAMELCASE = new RegExp('[^-._~!$&\\'()*+,;=]*?' + CAMELCASE_REGEXP_PATTERN + '|[^-._~!$&\\'()*+,;=]+', 'g');\nconst REVERT_CAMELCASE_ONLY = new RegExp('.*?' + CAMELCASE_REGEXP_PATTERN + '|.+', 'g');\nfunction revert(slug, options) {\n  options = options || {};\n  if (process.env.NODE_ENV !== 'production') {\n    validate(options, {\n      separator: null\n    });\n  }\n  const camelCase = options.camelCase !== undefined ? options.camelCase : false;\n  const separator = options.separator;\n  const transformer = options.transformer !== undefined ? options.transformer : false;\n  let fragments;\n  slug = String(slug);\n\n  /* Determine which method will be used split the slug */\n\n  if (separator === '') {\n    fragments = camelCase ? slug.match(REVERT_CAMELCASE_ONLY) : [String(slug)];\n  } else if (typeof separator === 'string') {\n    fragments = slug.split(separator);\n  } else {\n    fragments = slug.match(camelCase ? REVERT_CAMELCASE : REVERT);\n  }\n  if (!fragments) {\n    return '';\n  }\n  return transformer ? transformer(fragments, ' ') : fragments.join(' ');\n}\nexport { LOWERCASE_TRANSFORMER, SENTENCECASE_TRANSFORMER, TITLECASE_TRANSFORMER, UPPERCASE_TRANSFORMER, convert, convert as default, revert };","map":{"version":3,"names":["LOWERCASE_TRANSFORMER","fragments","separator","join","toLowerCase","SENTENCECASE_TRANSFORMER","sentence","charAt","toUpperCase","slice","TITLECASE_TRANSFORMER","buffer","index","length","push","UPPERCASE_TRANSFORMER","INVALID_SEPARATOR","CAMELCASE_REGEXP_PATTERN","validate","options","extra","camelCase","undefined","Error","test","match","transformer","replace","string","definitions","char","replacement","substr","addedCharsCount","String","COMBINING_CHARS","CONVERT","CONVERT_CAMELCASE","RegExp","convert","process","env","NODE_ENV","dictionary","normalize","REVERT","REVERT_CAMELCASE","REVERT_CAMELCASE_ONLY","revert","slug","split","default"],"sources":["/home/pierre/Documents/GitHub/CDA_fil_rouge/Angular/green-village/node_modules/url-slug/lib/index.js"],"sourcesContent":["const LOWERCASE_TRANSFORMER = function (fragments, separator) {\n  return fragments.join(separator).toLowerCase()\n};\n\nconst SENTENCECASE_TRANSFORMER = function (fragments, separator) {\n  const sentence = fragments.join(separator);\n  return sentence.charAt(0).toUpperCase() + sentence.slice(1).toLowerCase()\n};\n\nconst TITLECASE_TRANSFORMER = function (fragments, separator) {\n  const buffer = [];\n  for (let index = 0; index < fragments.length; index++) {\n    buffer.push(\n      fragments[index].charAt(0).toUpperCase() +\n      fragments[index].slice(1).toLowerCase()\n    );\n  }\n  return buffer.join(separator)\n};\n\nconst UPPERCASE_TRANSFORMER = function (fragments, separator) {\n  return fragments.join(separator).toUpperCase()\n};\n\nconst INVALID_SEPARATOR = /[^-._~!$&'()*+,;=]/;\n\nconst CAMELCASE_REGEXP_PATTERN = '(?:[a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))';\n\nfunction validate (options, extra) {\n  const camelCase = options.camelCase;\n\n  if (camelCase !== undefined && typeof camelCase !== 'boolean') {\n    throw new Error('camelCase must be a boolean: \"' + camelCase + '\".')\n  }\n\n  const separator = options.separator;\n  extra = extra || {};\n\n  if (\n    separator !== undefined &&\n    !('separator' in extra && separator === extra.separator)\n  ) {\n    if (typeof separator !== 'string') {\n      throw new Error(\n        'separator must be a string' +\n        ('separator' in extra ? ' or ' + extra.separator : '') + ': \"' +\n        separator + '\".'\n      )\n    } else if (INVALID_SEPARATOR.test(separator)) {\n      throw new Error(\n        'separator has an invalid character: \"' +\n        separator.match(INVALID_SEPARATOR)[0] + '\".'\n      )\n    }\n  }\n\n  const transformer = options.transformer;\n\n  if (\n    transformer !== undefined &&\n    transformer !== false &&\n    typeof transformer !== 'function'\n  ) {\n    throw new Error(\n      'transformer must be false or a function: \"' +\n      transformer + '\".'\n    )\n  }\n}\n\nfunction replace (string, definitions) {\n  for (let index = 0, length = string.length; index < length; index++) {\n    const char = string[index];\n    const replacement = definitions[char];\n\n    if (replacement !== undefined) {\n      string = string.substr(0, index) +\n        replacement +\n        string.substr(index + 1);\n\n      const addedCharsCount = String(replacement).length - 1;\n\n      index += addedCharsCount;\n      length += addedCharsCount;\n    }\n  }\n\n  return string\n}\n\n// eslint-disable-next-line no-misleading-character-class\nconst COMBINING_CHARS = /[\\u0300-\\u036F\\u1AB0-\\u1AFF\\u1DC0-\\u1DFF]+/g;\n\nconst CONVERT = /[A-Za-z\\d]+/g;\n\nconst CONVERT_CAMELCASE = new RegExp(\n  '[A-Za-z\\\\d]*?' + CAMELCASE_REGEXP_PATTERN + '|[A-Za-z\\\\d]+',\n  'g'\n);\n\nfunction convert (string, options) {\n  options = options || {};\n\n  if (process.env.NODE_ENV !== 'production') {\n    validate(options);\n  }\n\n  const camelCase = options.camelCase !== undefined\n    ? options.camelCase\n    : true;\n\n  const separator = options.separator !== undefined\n    ? options.separator\n    : '-';\n\n  const transformer = options.transformer !== undefined\n    ? options.transformer\n    : LOWERCASE_TRANSFORMER;\n\n  const fragments = (\n    options.dictionary\n      ? replace(String(string), options.dictionary)\n      : String(string)\n  )\n    .normalize('NFKD')\n    .replace(COMBINING_CHARS, '')\n    .match(camelCase ? CONVERT_CAMELCASE : CONVERT);\n\n  if (!fragments) {\n    return ''\n  }\n\n  return transformer\n    ? transformer(fragments, separator)\n    : fragments.join(separator)\n}\n\nconst REVERT = /[^-._~!$&'()*+,;=]+/g;\n\nconst REVERT_CAMELCASE = new RegExp(\n  '[^-._~!$&\\'()*+,;=]*?' + CAMELCASE_REGEXP_PATTERN + '|[^-._~!$&\\'()*+,;=]+',\n  'g'\n);\n\nconst REVERT_CAMELCASE_ONLY = new RegExp(\n  '.*?' + CAMELCASE_REGEXP_PATTERN + '|.+',\n  'g'\n);\n\nfunction revert (slug, options) {\n  options = options || {};\n\n  if (process.env.NODE_ENV !== 'production') {\n    validate(options, { separator: null });\n  }\n\n  const camelCase = options.camelCase !== undefined\n    ? options.camelCase\n    : false;\n\n  const separator = options.separator;\n\n  const transformer = options.transformer !== undefined\n    ? options.transformer\n    : false;\n\n  let fragments;\n  slug = String(slug);\n\n  /* Determine which method will be used split the slug */\n\n  if (separator === '') {\n    fragments = camelCase ? slug.match(REVERT_CAMELCASE_ONLY) : [String(slug)];\n  } else if (typeof separator === 'string') {\n    fragments = slug.split(separator);\n  } else {\n    fragments = slug.match(camelCase ? REVERT_CAMELCASE : REVERT);\n  }\n\n  if (!fragments) {\n    return ''\n  }\n\n  return transformer ? transformer(fragments, ' ') : fragments.join(' ')\n}\n\nexport { LOWERCASE_TRANSFORMER, SENTENCECASE_TRANSFORMER, TITLECASE_TRANSFORMER, UPPERCASE_TRANSFORMER, convert, convert as default, revert };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}