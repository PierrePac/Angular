{"ast":null,"code":"import { map, switchMap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./produits.service\";\nexport class uploadService {\n  constructor(httpClient, produitService) {\n    this.httpClient = httpClient;\n    this.produitService = produitService;\n  }\n  uploadFile(file) {\n    let formParams = new FormData();\n    formParams.append('file', file);\n    return this.httpClient.post(`http://127.0.0.1:8000/api/post_image`, formParams);\n  }\n  uploadProduit(formValue) {\n    return this.produitService.getAllProduit().pipe(map(produits => [...produits].sort((a, b) => a.id - b.id)), map(sortedProduits => sortedProduits[sortedProduits.length - 1]), map(previousProduits => ({\n      ...formValue,\n      slug: this.transform(formValue.shortLibel)\n    })), switchMap(newProduit => this.httpClient.post('http://127.0.0.1:8000/api/produits', newProduit)));\n  }\n  uploadPhoto(images, idProduit) {\n    return this.produitService.getAllProduit().pipe(map(produits => [...produits].sort((a, b) => a.id - b.id)), map(sortedProduits => sortedProduits[sortedProduits.length - 1]), map(previousProduit => ({\n      refProduit: \"/api/produits/\" + idProduit,\n      src: 'assets/media/produits/' + images,\n      majorPicture: false\n    })), switchMap(newPhoto => this.httpClient.post('http://127.0.0.1:8000/api/photos', newPhoto)));\n  }\n  uploadPhotoPrincipale(image, idProduit) {\n    return this.produitService.getAllProduit().pipe(map(produits => [...produits].sort((a, b) => a.id - b.id)), map(sortedProduits => sortedProduits[sortedProduits.length - 1]), map(previousProduit => ({\n      refProduit: \"/api/produits/\" + idProduit,\n      src: 'assets/media/produits/' + image,\n      majorPicture: true\n    })), switchMap(newPhoto => this.httpClient.post('http://127.0.0.1:8000/api/photos', newPhoto)));\n  }\n  transform(input) {\n    return input.toString().toLowerCase().replace(/\\s+/g, '-') // Replace spaces with -\n    .replace(/[^\\w\\-]+/g, '') // Remove all non-word chars\n    .replace(/\\-\\-+/g, '-') // Replace multiple - with single -\n    .replace(/^-+/, '') // Trim - from start of text\n    .replace(/-+$/, ''); // Trim - from end of text\n  }\n\n  deletePicture(idPicture) {\n    return this.httpClient.delete(`http://127.0.0.1:8000/api/photos/${idPicture}`);\n  }\n  PromotedPicture(idPicture, idProduit) {\n    this.demotedPicture$ = this.produitService.getTheMajorPictureOneProduit(idProduit);\n    if (this.demotedPicture$) {\n      this.demotedPicture$.subscribe();\n      console.log;\n    }\n  }\n}\nuploadService.ɵfac = function uploadService_Factory(t) {\n  return new (t || uploadService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.produitsService));\n};\nuploadService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: uploadService,\n  factory: uploadService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","switchMap","uploadService","constructor","httpClient","produitService","uploadFile","file","formParams","FormData","append","post","uploadProduit","formValue","getAllProduit","pipe","produits","sort","a","b","id","sortedProduits","length","previousProduits","slug","transform","shortLibel","newProduit","uploadPhoto","images","idProduit","previousProduit","refProduit","src","majorPicture","newPhoto","uploadPhotoPrincipale","image","input","toString","toLowerCase","replace","deletePicture","idPicture","delete","PromotedPicture","demotedPicture$","getTheMajorPictureOneProduit","subscribe","console","log","factory","providedIn"],"sourceRoot":"","sources":["/home/pierre/Documents/GitHub/CDA_fil_rouge/Angular/green-village/src/app/services/upload.servive.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { map, Observable, switchMap } from \"rxjs\";\nimport { ResponsePhoto } from \"../interface/reponsePhoto.interface\";\nimport { Produit } from \"../models/produit.model\";\nimport { produitsService } from \"./produits.service\";\nimport { PipeTransform } from '@angular/core';\nimport { Photo } from \"../models/photo.model\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class uploadService implements ResponsePhoto, PipeTransform{\n    \n    constructor(private httpClient: HttpClient,\n                private produitService: produitsService,\n                \n                ){}\n\n    nom!: string;\n    lastProduit$!: Observable<Produit>;\n    idLastProduit!: number;\n    demotedPicture$!: Observable<Photo>;\n\n\n    public uploadFile(file: File): Observable<ResponsePhoto> {\n        let formParams = new FormData();\n        formParams.append('file', file);\n        return this.httpClient.post<any>(`http://127.0.0.1:8000/api/post_image`, formParams);\n    }\n\n    public uploadProduit(formValue: {refProduit: string, shortLibel: string, longLibel: string, idCategorie: number, prixHt: number, slug: string}): Observable<Produit>{\n        return this.produitService.getAllProduit().pipe(\n            map(produits => [...produits].sort((a,b)=>a.id - b.id)),\n            map(sortedProduits => sortedProduits[sortedProduits.length - 1]),\n            map(previousProduits => ({\n                ...formValue,\n                slug: this.transform(formValue.shortLibel),\n            })),\n            switchMap(newProduit => this.httpClient.post<Produit>('http://127.0.0.1:8000/api/produits', newProduit))\n        );\n    }\n\n    public  uploadPhoto(images: string, idProduit: number): Observable<Photo>{\n        return this.produitService.getAllProduit().pipe(\n            map(produits => [...produits].sort((a,b)=>a.id - b.id)),\n            map(sortedProduits => sortedProduits[sortedProduits.length -1]),\n            map(previousProduit => ({\n                refProduit: \"/api/produits/\" + idProduit,\n                src: 'assets/media/produits/' + images,\n                majorPicture: false,\n            })),\n            switchMap(newPhoto => this.httpClient.post<Photo>('http://127.0.0.1:8000/api/photos', newPhoto))\n        )\n    }\n    public  uploadPhotoPrincipale(image: string, idProduit: number): Observable<Photo>{\n        return this.produitService.getAllProduit().pipe(\n            map(produits => [...produits].sort((a,b)=>a.id - b.id)),\n            map(sortedProduits => sortedProduits[sortedProduits.length -1]),\n            map(previousProduit => ({\n                refProduit: \"/api/produits/\" + idProduit,\n                src: 'assets/media/produits/' + image,\n                majorPicture: true,\n            })),\n            switchMap(newPhoto => this.httpClient.post<Photo>('http://127.0.0.1:8000/api/photos', newPhoto))\n        )\n    }\n\n    transform(input: string): string {\n        return input.toString().toLowerCase()\n        .replace(/\\s+/g, '-')           // Replace spaces with -\n        .replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\n        .replace(/\\-\\-+/g, '-')         // Replace multiple - with single -\n        .replace(/^-+/, '')             // Trim - from start of text\n        .replace(/-+$/, '');            // Trim - from end of text\n        \n    }\n    public deletePicture(idPicture: number): Observable<Photo>{\n        return this.httpClient.delete<Photo>(`http://127.0.0.1:8000/api/photos/${idPicture}`);\n    }\n\n    public PromotedPicture(idPicture: number, idProduit: number){\n        this.demotedPicture$ = this.produitService.getTheMajorPictureOneProduit(idProduit);\n        if(this.demotedPicture$){\n            this.demotedPicture$.subscribe();\n            console.log\n        }\n\n\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}