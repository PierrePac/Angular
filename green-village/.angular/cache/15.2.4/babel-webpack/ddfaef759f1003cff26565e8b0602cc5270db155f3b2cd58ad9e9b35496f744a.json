{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    const headers = new HttpHeaders().append('Authorization', `Bearer ${this.authService.getToken()}`);\n    const modifiedReq = req.clone({\n      headers\n    });\n    return next.handle(modifiedReq);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,eAAe;EAExBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAe;EAE9CC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,MAAMC,OAAO,GAAG,IAAIC,WAAW,EAAE,CAChCC,MAAM,CAAC,eAAe,EAAE,UAAU,IAAI,CAACN,WAAW,CAACO,QAAQ,EAAE,EAAE,CAAC;IACjE,MAAMC,WAAW,GAAGN,GAAG,CAACO,KAAK,CAAC;MAAEL;IAAO,CAAE,CAAC;IAC1C,OAAOD,IAAI,CAACO,MAAM,CAACF,WAAW,CAAC;EACnC;;AATSV,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAa,SAAfb,eAAe;AAAA","names":["AuthInterceptor","constructor","authService","intercept","req","next","headers","HttpHeaders","append","getToken","modifiedReq","clone","handle","factory"],"sourceRoot":"","sources":["/home/pierre/Documents/GitHub/CDA_fil_rouge/Angular/green-village/src/app/interceptors/auth.interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n    constructor(private authService: AuthService){}\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const headers = new HttpHeaders()\n        .append('Authorization', `Bearer ${this.authService.getToken()}`);\n        const modifiedReq = req.clone({ headers });\n        return next.handle(modifiedReq);\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}